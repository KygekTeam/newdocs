"use strict";(self.webpackChunkkygekteamdocs=self.webpackChunkkygekteamdocs||[]).push([[236],{5390:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return r},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return p},default:function(){return m}});var a=t(7462),s=t(3366),i=(t(7294),t(3905)),o=["components"],r={sidebar_label:"PSR-1",sidebar_position:4},l="Basic Coding Standard",d={unversionedId:"psr1",id:"psr1",isDocsHomePage:!1,title:"Basic Coding Standard",description:"KygekTeam uses a modified version of this standard. The modified version is here.",source:"@site/docs/psr1.md",sourceDirName:".",slug:"/psr1",permalink:"/docs/psr1",editUrl:"https://github.com/kygekteam/docs/edit/main/docs/psr1.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_label:"PSR-1",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"PocketMine-MP 4 Plugins",permalink:"/docs/pm4"}},p=[{value:"1. Overview",id:"1-overview",children:[]},{value:"2. Files",id:"2-files",children:[{value:"2.1. PHP Tags",id:"21-php-tags",children:[]},{value:"2.2. Character Encoding",id:"22-character-encoding",children:[]},{value:"2.3. Side Effects",id:"23-side-effects",children:[]}]},{value:"3. Namespace and Class Names",id:"3-namespace-and-class-names",children:[]},{value:"4. Class Constants, Properties, and Methods",id:"4-class-constants-properties-and-methods",children:[{value:"4.1. Constants",id:"41-constants",children:[]},{value:"4.2. Properties",id:"42-properties",children:[]},{value:"4.3. Methods",id:"43-methods",children:[]}]}],c={toc:p};function m(e){var n=e.components,t=(0,s.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"basic-coding-standard"},"Basic Coding Standard"),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Warning")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"KygekTeam uses a modified version of this standard. The modified version is ",(0,i.kt)("a",{parentName:"p",href:"/docs/php-coding-standards"},"here"),"."))),(0,i.kt)("p",null,"This section of the standard comprises what should be considered the standard\ncoding elements that are required to ensure a high level of technical\ninteroperability between shared PHP code."),(0,i.kt)("p",null,'The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",\n"SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be\ninterpreted as described in ',(0,i.kt)("a",{parentName:"p",href:"http://www.ietf.org/rfc/rfc2119.txt"},"RFC 2119"),"."),(0,i.kt)("h2",{id:"1-overview"},"1. Overview"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Files MUST use only ",(0,i.kt)("inlineCode",{parentName:"p"},"<?php")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"<?=")," tags.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Files MUST use only UTF-8 without BOM for PHP code.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Files SHOULD ",(0,i.kt)("em",{parentName:"p"},"either")," declare symbols (classes, functions, constants, etc.)\n",(0,i.kt)("em",{parentName:"p"},"or")," cause side-effects (e.g. generate output, change .ini settings, etc.)\nbut SHOULD NOT do both.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'Namespaces and classes MUST follow an "autoloading" PSR: [',(0,i.kt)("a",{parentName:"p",href:"https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md"},"PSR-0"),", ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md"},"PSR-4"),"].")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Class names MUST be declared in ",(0,i.kt)("inlineCode",{parentName:"p"},"StudlyCaps"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Class constants MUST be declared in all upper case with underscore separators.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method names MUST be declared in ",(0,i.kt)("inlineCode",{parentName:"p"},"camelCase"),"."))),(0,i.kt)("h2",{id:"2-files"},"2. Files"),(0,i.kt)("h3",{id:"21-php-tags"},"2.1. PHP Tags"),(0,i.kt)("p",null,"PHP code MUST use the long ",(0,i.kt)("inlineCode",{parentName:"p"},"<?php ?>")," tags or the short-echo ",(0,i.kt)("inlineCode",{parentName:"p"},"<?= ?>")," tags; it\nMUST NOT use the other tag variations."),(0,i.kt)("h3",{id:"22-character-encoding"},"2.2. Character Encoding"),(0,i.kt)("p",null,"PHP code MUST use only UTF-8 without BOM."),(0,i.kt)("h3",{id:"23-side-effects"},"2.3. Side Effects"),(0,i.kt)("p",null,"A file SHOULD declare new symbols (classes, functions, constants,\netc.) and cause no other side effects, or it SHOULD execute logic with side\neffects, but SHOULD NOT do both."),(0,i.kt)("p",null,'The phrase "side effects" means execution of logic not directly related to\ndeclaring classes, functions, constants, etc., ',(0,i.kt)("em",{parentName:"p"},"merely from including the\nfile"),"."),(0,i.kt)("p",null,'"Side effects" include but are not limited to: generating output, explicit\nuse of ',(0,i.kt)("inlineCode",{parentName:"p"},"require")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"include"),", connecting to external services, modifying ini\nsettings, emitting errors or exceptions, modifying global or static variables,\nreading from or writing to a file, and so on."),(0,i.kt)("p",null,"The following is an example of a file with both declarations and side effects;\ni.e, an example of what to avoid:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},'<?php\n// side effect: change ini settings\nini_set(\'error_reporting\', E_ALL);\n\n// side effect: loads a file\ninclude "file.php";\n\n// side effect: generates output\necho "<html>\\n";\n\n// declaration\nfunction foo()\n{\n    // function body\n}\n')),(0,i.kt)("p",null,"The following example is of a file that contains declarations without side\neffects; i.e., an example of what to emulate:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n// declaration\nfunction foo()\n{\n    // function body\n}\n\n// conditional declaration is *not* a side effect\nif (! function_exists('bar')) {\n    function bar()\n    {\n        // function body\n    }\n}\n")),(0,i.kt)("h2",{id:"3-namespace-and-class-names"},"3. Namespace and Class Names"),(0,i.kt)("p",null,'Namespaces and classes MUST follow an "autoloading" PSR: [',(0,i.kt)("a",{parentName:"p",href:"https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md"},"PSR-0"),", ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md"},"PSR-4"),"]."),(0,i.kt)("p",null,"This means each class is in a file by itself, and is in a namespace of at\nleast one level: a top-level vendor name."),(0,i.kt)("p",null,"Class names MUST be declared in ",(0,i.kt)("inlineCode",{parentName:"p"},"StudlyCaps"),"."),(0,i.kt)("p",null,"Code written for PHP 5.3 and after MUST use formal namespaces."),(0,i.kt)("p",null,"For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n// PHP 5.3 and later:\nnamespace Vendor\\Model;\n\nclass Foo\n{\n}\n")),(0,i.kt)("p",null,"Code written for 5.2.x and before SHOULD use the pseudo-namespacing convention\nof ",(0,i.kt)("inlineCode",{parentName:"p"},"Vendor_")," prefixes on class names."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n// PHP 5.2.x and earlier:\nclass Vendor_Model_Foo\n{\n}\n")),(0,i.kt)("h2",{id:"4-class-constants-properties-and-methods"},"4. Class Constants, Properties, and Methods"),(0,i.kt)("p",null,'The term "class" refers to all classes, interfaces, and traits.'),(0,i.kt)("h3",{id:"41-constants"},"4.1. Constants"),(0,i.kt)("p",null,"Class constants MUST be declared in all upper case with underscore separators.\nFor example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"<?php\nnamespace Vendor\\Model;\n\nclass Foo\n{\n    const VERSION = '1.0';\n    const DATE_APPROVED = '2012-06-01';\n}\n")),(0,i.kt)("h3",{id:"42-properties"},"4.2. Properties"),(0,i.kt)("p",null,"This guide intentionally avoids any recommendation regarding the use of\n",(0,i.kt)("inlineCode",{parentName:"p"},"$StudlyCaps"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"$camelCase"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"$under_score")," property names."),(0,i.kt)("p",null,"Whatever naming convention is used SHOULD be applied consistently within a\nreasonable scope. That scope may be vendor-level, package-level, class-level,\nor method-level."),(0,i.kt)("h3",{id:"43-methods"},"4.3. Methods"),(0,i.kt)("p",null,"Method names MUST be declared in ",(0,i.kt)("inlineCode",{parentName:"p"},"camelCase()"),"."))}m.isMDXComponent=!0}}]);